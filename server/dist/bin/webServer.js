"use strict";
var http = require('http');
function normalizePort(val) {
    var parsedPort = parseInt(val, 10);
    if (isNaN(parsedPort)) {
        return val;
    }
    if (parsedPort >= 0) {
        return parsedPort;
    }
    return false;
}
function onListening(server, cb) {
    return function onListen() {
        var addr = server.address();
        var host = addr.address || '';
        var bind = typeof addr === 'string'
            ? 'pipe ' + addr
            : host + ':' + addr.port;
        console.log('Listening on ' + bind);
        if (cb) {
            cb();
        }
    };
}
function onError(port, host) {
    return function onError(error) {
        if (error.syscall !== 'listen') {
            throw error;
        }
        var address = host + ':' + port;
        switch (error.code) {
            case 'EACCES':
                console.error(address + ' requires elevated privileges');
                process.exit(1);
                break;
            case 'EADDRINUSE':
                console.error(port + ' is already in use');
                process.exit(1);
                break;
            case 'EADDRNOTAVAIL':
                console.log(error);
                console.error(address + ' is not available');
                process.exit(1);
                break;
            default:
                throw error;
        }
    };
}
var webServer = {
    _preCallback: null,
    _afterCallback: null,
    _addCallback: function (property, cb) {
        if (cb && typeof cb !== 'function') {
            throw Error('Arguemnt must be function!');
        }
        this[property] = cb;
    },
    pre: function (cb) {
        return this._addCallback('_preCallback', cb);
    },
    after: function (cb) {
        return this._addCallback('_afterCallback', cb);
    },
    run: function (app) {
        var port = normalizePort(app.get('port'));
        var host = app.get('host');
        var server = http.createServer(app);
        if (this._preCallback) {
            this._preCallback(server);
        }
        server.listen(port, host);
        server.on('error', onError(port, host));
        server.on('listening', onListening(server, this._afterCallback));
    }
};
module.exports = webServer;

//# sourceMappingURL=data:application/json;base64,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VUFBUyxFQUFFO1FBQ2YsTUFBTSxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsY0FBYyxFQUFFLEVBQUUsQ0FBQyxDQUFDO0lBQzlDLENBQUM7SUFFRCxLQUFLLEVBQUUsVUFBVSxFQUFFO1FBQ2xCLE1BQU0sQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLGdCQUFnQixFQUFFLEVBQUUsQ0FBQyxDQUFDO0lBQ2hELENBQUM7SUFFRCxHQUFHLEVBQUUsVUFBUyxHQUFHO1FBRWhCLElBQU0sSUFBSSxHQUFHLGFBQWEsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7UUFDNUMsSUFBTSxJQUFJLEdBQUcsR0FBRyxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUM3QixJQUFNLE1BQU0sR0FBRyxJQUFJLENBQUMsWUFBWSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBRXRDLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDO1lBQ3ZCLElBQUksQ0FBQyxZQUFZLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDM0IsQ0FBQztRQUVELE1BQU0sQ0FBQyxNQUFNLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxDQUFDO1FBQzFCLE1BQU0sQ0FBQyxFQUFFLENBQUMsT0FBTyxFQUFFLE9BQU8sQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLENBQUMsQ0FBQztRQUN4QyxNQUFNLENBQUMsRUFBRSxDQUFDLFdBQVcsRUFBRSxXQUFXLENBQUMsTUFBTSxFQUFFLElBQUksQ0FBQyxjQUFjLENBQUMsQ0FBQyxDQUFDO0lBQ2xFLENBQUM7Q0FFRCxDQUFDO0FBRUYsTUFBTSxDQUFDLE9BQU8sR0FBRyxTQUFTLENBQUMiLCJmaWxlIjoiYmluL3dlYlNlcnZlci5qcyIsInNvdXJjZXNDb250ZW50IjpbIlxuaW1wb3J0IGh0dHAgPSByZXF1aXJlKCdodHRwJyk7XG5cbi8qKlxuICogQHBhcmFtICB7Kn0gdmFsIGlucHV0XG4gKiBAcmV0dXJuIHtudW1iZXJ8c3RyaW5nfVxuICovXG5mdW5jdGlvbiBub3JtYWxpemVQb3J0ICh2YWwpIHtcbiAgICBjb25zdCBwYXJzZWRQb3J0ID0gcGFyc2VJbnQodmFsLCAxMCk7XG5cbiAgICBpZiAoaXNOYU4ocGFyc2VkUG9ydCkpIHtcbiAgICAgICAgLy8gbmFtZWQgcGlwZVxuICAgICAgICByZXR1cm4gdmFsO1xuICAgIH1cblxuICAgIGlmIChwYXJzZWRQb3J0ID49IDApIHtcbiAgICAgICAgLy8gcG9ydCBudW1iZXJcbiAgICAgICAgcmV0dXJuIHBhcnNlZFBvcnQ7XG4gICAgfVxuXG4gICAgcmV0dXJuIGZhbHNlO1xufVxuXG5cbi8qKlxuICogRXZlbnQgbGlzdGVuZXIgZm9yIEhUVFAgc2VydmVyIFwibGlzdGVuaW5nXCIgZXZlbnQuXG4gKi9cbmZ1bmN0aW9uIG9uTGlzdGVuaW5nKHNlcnZlciwgY2IpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gb25MaXN0ZW4gKCkge1xuICAgICAgICBjb25zdCBhZGRyID0gc2VydmVyLmFkZHJlc3MoKTtcbiAgICAgICAgY29uc3QgaG9zdCA9IGFkZHIuYWRkcmVzcyB8fCAnJztcbiAgICAgICAgY29uc3QgYmluZCA9IHR5cGVvZiBhZGRyID09PSAnc3RyaW5nJ1xuICAgICAgICAgICAgPyAncGlwZSAnICsgYWRkclxuICAgICAgICAgICAgOiBob3N0ICsgJzonICsgYWRkci5wb3J0O1xuICAgICAgICBjb25zb2xlLmxvZygnTGlzdGVuaW5nIG9uICcgKyBiaW5kKTtcblxuICAgICAgICBpZiAoY2IpIHtcbiAgICAgICAgICAgIGNiKCk7XG4gICAgICAgIH1cbiAgICB9O1xufVxuXG4vKipcbiAqIEV2ZW50IGxpc3RlbmVyIGZvciBIVFRQIHNlcnZlciBcImVycm9yXCIgZXZlbnQuXG4gKi9cblxuZnVuY3Rpb24gb25FcnJvcihwb3J0LCBob3N0KSB7XG5cbiAgICByZXR1cm4gZnVuY3Rpb24gb25FcnJvcihlcnJvcikge1xuICAgICAgICBpZiAoZXJyb3Iuc3lzY2FsbCAhPT0gJ2xpc3RlbicpIHtcbiAgICAgICAgICAgIHRocm93IGVycm9yO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgYWRkcmVzcyA9IGhvc3QgKyAnOicgKyAgcG9ydDtcblxuICAgICAgICBzd2l0Y2ggKGVycm9yLmNvZGUpIHtcbiAgICAgICAgICAgIGNhc2UgJ0VBQ0NFUyc6XG4gICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihhZGRyZXNzICsgJyByZXF1aXJlcyBlbGV2YXRlZCBwcml2aWxlZ2VzJyk7XG4gICAgICAgICAgICAgICAgcHJvY2Vzcy5leGl0KDEpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnRUFERFJJTlVTRSc6XG4gICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihwb3J0ICsgJyBpcyBhbHJlYWR5IGluIHVzZScpO1xuICAgICAgICAgICAgICAgIHByb2Nlc3MuZXhpdCgxKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ0VBRERSTk9UQVZBSUwnOlxuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGVycm9yKTtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKGFkZHJlc3MgKyAnIGlzIG5vdCBhdmFpbGFibGUnKTtcbiAgICAgICAgICAgICAgICBwcm9jZXNzLmV4aXQoMSk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIHRocm93IGVycm9yO1xuICAgICAgICB9XG4gICAgfVxufVxuXG5cblxuXG5jb25zdCB3ZWJTZXJ2ZXIgPSAge1xuXG5cdF9wcmVDYWxsYmFjazogbnVsbCxcblxuXHRfYWZ0ZXJDYWxsYmFjazogbnVsbCxcblxuXHRfYWRkQ2FsbGJhY2s6IGZ1bmN0aW9uKHByb3BlcnR5LCBjYikge1xuXHRcdGlmIChjYiAmJiB0eXBlb2YgY2IgIT09ICdmdW5jdGlvbicpIHtcblx0XHRcdHRocm93IEVycm9yKCdBcmd1ZW1udCBtdXN0IGJlIGZ1bmN0aW9uIScpO1xuXHRcdH1cblxuXHRcdHRoaXNbcHJvcGVydHldID0gY2I7XG5cdH0sXG5cblxuXHRwcmU6IGZ1bmN0aW9uKGNiKSB7XG5cdFx0cmV0dXJuIHRoaXMuX2FkZENhbGxiYWNrKCdfcHJlQ2FsbGJhY2snLCBjYik7XG5cdH0sXG5cblx0YWZ0ZXI6IGZ1bmN0aW9uIChjYikge1xuXHRcdHJldHVybiB0aGlzLl9hZGRDYWxsYmFjaygnX2FmdGVyQ2FsbGJhY2snLCBjYik7XG5cdH0sXG5cblx0cnVuOiBmdW5jdGlvbihhcHApIHtcblxuXHRcdGNvbnN0IHBvcnQgPSBub3JtYWxpemVQb3J0KGFwcC5nZXQoJ3BvcnQnKSk7XG5cdFx0Y29uc3QgaG9zdCA9IGFwcC5nZXQoJ2hvc3QnKTtcblx0XHRjb25zdCBzZXJ2ZXIgPSBodHRwLmNyZWF0ZVNlcnZlcihhcHApO1xuXG5cdFx0aWYgKHRoaXMuX3ByZUNhbGxiYWNrKSB7XG5cdFx0XHR0aGlzLl9wcmVDYWxsYmFjayhzZXJ2ZXIpO1xuXHRcdH1cblxuXHRcdHNlcnZlci5saXN0ZW4ocG9ydCwgaG9zdCk7XG5cdFx0c2VydmVyLm9uKCdlcnJvcicsIG9uRXJyb3IocG9ydCwgaG9zdCkpO1xuXHRcdHNlcnZlci5vbignbGlzdGVuaW5nJywgb25MaXN0ZW5pbmcoc2VydmVyLCB0aGlzLl9hZnRlckNhbGxiYWNrKSk7XG5cdH1cblxufTtcblxubW9kdWxlLmV4cG9ydHMgPSB3ZWJTZXJ2ZXI7XG4iXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=
